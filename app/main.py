"""
Punto de entrada principal de la aplicaci√≥n FastAPI.
Configura la aplicaci√≥n, middleware, CORS, rutas y manejadores de excepciones.
"""
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import logging
import time
from datetime import datetime
from app.core.config import settings
from app.interfaces.api.v1.api_v1 import api_router
from app.infrastructure.db.mongo_client import mongo_client
from app.core.exception_handlers import EXCEPTION_HANDLERS

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Maneja el ciclo de vida de la aplicaci√≥n.
    Se ejecuta al iniciar y al cerrar la aplicaci√≥n.
    """
    # Startup: Conectar a la base de datos
    logger.info("üöÄ Iniciando aplicaci√≥n...")
    try:
        success = await mongo_client.connect()
        if success:
            logger.info("‚úÖ Conectado exitosamente a MongoDB")
            logger.info(f"üìä Base de datos: {settings.DATABASE_NAME}")
            logger.info(f"üîó URL: {settings.MONGODB_URL}")
        else:
            logger.error("‚ùå No se pudo conectar a MongoDB")
            logger.error("‚ö†Ô∏è  La aplicaci√≥n continuar√° pero las operaciones de BD fallar√°n")
    except Exception as e:
        logger.error(f"‚ùå Error al conectar a MongoDB: {e}")
        logger.error("‚ö†Ô∏è  La aplicaci√≥n continuar√° pero las operaciones de BD fallar√°n")
    
    yield
    
    # Shutdown: Cerrar conexiones
    logger.info("üõë Cerrando aplicaci√≥n...")
    try:
        await mongo_client.disconnect()
        logger.info("‚úÖ Desconectado de MongoDB")
    except Exception as e:
        logger.error(f"‚ùå Error al desconectar de MongoDB: {e}")

# Crear instancia de FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.PROJECT_VERSION,
    description="""
    ## Clients API -

    API REST para gesti√≥n de usuarios con autenticaci√≥n JWT implementada siguiendo principios de Clean Architecture.

    ### Arquitectura

    - **Domain Layer**: Entidades y l√≥gica de negocio pura
    - **Application Layer**: Casos de uso y orquestaci√≥n  
    - **Infrastructure Layer**: Implementaciones concretas (BD, Auth, etc.)
    - **Presentation Layer**: Controllers y endpoints de API

    ### Caracter√≠sticas principales

    * **Autenticaci√≥n JWT**: Sistema seguro de tokens Bearer con expiraci√≥n configurable (30 minutos)
    * **CRUD Completo de Usuarios**: Operaciones completas de gesti√≥n con validaciones robustas
    * **Validaci√≥n Integral**: Validaciones con Pydantic v2.5.0 y reglas de negocio en casos de uso
    * **Seguridad Avanzada**: Contrase√±as hasheadas con bcrypt, validaci√≥n de tokens, usuarios activos/inactivos
    * **Paginaci√≥n Eficiente**: Listados con par√°metros skip/limit (m√°ximo 100 por p√°gina) y metadatos
    * **Soft Delete**: Desactivaci√≥n de usuarios preservando datos hist√≥ricos
    * **Manejo Centralizado de Errores**: Sistema robusto de excepciones personalizadas por dominio
    * **Documentaci√≥n OpenAPI**: Swagger UI y ReDoc con esquemas detallados
    * **MongoDB As√≠ncrono**: Base de datos NoSQL con Motor driver, √≠ndices optimizados y health checks

    ### Endpoints principales

    #### Autenticaci√≥n (p√∫blico)
    - **`POST /api/v1/auth/register`** - Registrar nuevo usuario
    - **`POST /api/v1/auth/login`** - Iniciar sesi√≥n y obtener token JWT
    - **`GET /api/v1/auth/validate-token`** - Validar token JWT (requiere autenticaci√≥n)

    #### Usuarios (requiere autenticaci√≥n)
    - **`POST /api/v1/users`** - Crear usuario (endpoint administrativo protegido)
    - **`GET /api/v1/users/user/{user_id}`** - Obtener usuario por ID espec√≠fico
    - **`GET /api/v1/users`** - Listar usuarios con paginaci√≥n
    - **`PUT /api/v1/users/user/{user_id}`** - Actualizar usuario existente
    - **`DELETE /api/v1/users/user/{user_id}`** - Eliminar usuario (soft delete)
    - **`GET /api/v1/users/me/profile`** - Obtener perfil del usuario autenticado

    #### Utilidades y monitoreo
    - **`GET /api/v1/health`** - Health check b√°sico de la API
    - **`GET /api/v1/info`** - Informaci√≥n detallada de la API
    - **`GET /status`** - Estado completo del sistema con estad√≠sticas

    ### Autenticaci√≥n

    Para acceder a endpoints protegidos, incluye el token JWT:
    ```
    Authorization: Bearer <tu_token_jwt>
    ```

    **Caracter√≠sticas del sistema de autenticaci√≥n:**
    - Tokens JWT con expiraci√≥n de 30 minutos (configurable)
    - Validaci√≥n estricta: email √∫nico, contrase√±as de 6-128 caracteres
    - Solo usuarios activos pueden autenticarse
    - Permisos granulares: usuarios solo pueden modificar sus propios datos

    ### Inicio r√°pido

    1. **Registrarse**: `POST /api/v1/auth/register`
    2. **Iniciar sesi√≥n**: `POST /api/v1/auth/login` ‚Üí Obtiene token JWT + datos del usuario
    3. **Usar token**: Incluir en header `Authorization: Bearer <token>`
    4. **Explorar API**: Usar los endpoints protegidos con paginaci√≥n

    ### Base de datos

    - **MongoDB 7.0**: Base de datos NoSQL con alta disponibilidad
    - **Motor 3.3.2**: Driver as√≠ncrono para Python con conexi√≥n persistente
    - **√çndices optimizados**: 
    - √önico en `email` para unicidad
    - Compuesto en `is_active + email` para consultas eficientes
    - Simple en `is_active` para filtros de usuarios activos
    - **Health checks autom√°ticos**: Monitoreo de estado de conexi√≥n
    - **Colecci√≥n `users`** en base de datos `clients_db`

    ### Par√°metros de paginaci√≥n

    Para listado de usuarios (`GET /api/v1/users`):
    - **`skip`**: Registros a saltar (default: 0, m√≠nimo: 0)
    - **`limit`**: Registros por p√°gina (default: 20, rango: 1-100)

    **Ejemplo**: `GET /api/v1/users?skip=20&limit=10`
    """,
    openapi_url=f"{settings.API_V1_PREFIX}/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Registrar manejadores de excepciones
for exception_type, handler in EXCEPTION_HANDLERS.items():
    app.add_exception_handler(exception_type, handler)

# Incluir rutas de la API v1
app.include_router(
    api_router,
    prefix=settings.API_V1_PREFIX
)

# Middleware para logging de requests
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware para logging de todas las requests."""
    start_time = time.time()
    
    # Log request
    logger.info(f"üì• {request.method} {request.url}")
    
    response = await call_next(request)
    
    # Log response
    process_time = time.time() - start_time
    logger.info(f"üì§ {request.method} {request.url} - {response.status_code} - {process_time:.4f}s")
    
    return response

# Endpoint ra√≠z
@app.get(
    "/",
    tags=["root"],
    summary="Root Endpoint",
    description="Endpoint ra√≠z que proporciona informaci√≥n b√°sica de la API"
)
async def root():
    """
    Endpoint ra√≠z con informaci√≥n b√°sica de la API.
    
    Proporciona enlaces √∫tiles y estado general del sistema.
    """
    return {
        "message": f"¬°Bienvenido a {settings.PROJECT_NAME}! üöÄ",
        "version": settings.PROJECT_VERSION,
        "architecture": "Clean Architecture",
        "status": "active",
        "database": {
            "type": "MongoDB",
            "status": "connected" if mongo_client.is_connected() else "disconnected",
            "database": settings.DATABASE_NAME
        },
        "links": {
            "documentation": "/docs",
            "redoc": "/redoc",
            "api_v1": settings.API_V1_PREFIX,
            "health_check": f"{settings.API_V1_PREFIX}/health",
            "api_info": f"{settings.API_V1_PREFIX}/info"
        },
        "authentication": {
            "register": f"{settings.API_V1_PREFIX}/auth/register",
            "login": f"{settings.API_V1_PREFIX}/auth/login",
            "validate": f"{settings.API_V1_PREFIX}/auth/validate-token",
            "type": "JWT Bearer Token"
        }
    }

# Endpoint de estado detallado
@app.get(
    "/status",
    tags=["status"],
    summary="Application Status",
    description="Estado detallado de la aplicaci√≥n y sus componentes"
)
async def status():
    """
    Proporciona informaci√≥n detallada del estado de la aplicaci√≥n.
    
    Incluye estado de conexiones, configuraci√≥n y m√©tricas b√°sicas.
    """
    # Obtener estad√≠sticas de la base de datos si est√° conectada
    db_stats = {}
    if mongo_client.is_connected():
        try:
            db_stats = {
                "total_users": await mongo_client.count_users(),
                "active_users": await mongo_client.count_active_users(),
            }
        except Exception as e:
            db_stats = {"error": f"No se pudieron obtener estad√≠sticas: {str(e)}"}
    
    return {
        "application": {
            "name": settings.PROJECT_NAME,
            "version": settings.PROJECT_VERSION,
            "environment": settings.ENVIRONMENT,
            "debug": settings.DEBUG
        },
        "services": {
            "database": {
                "status": "connected" if mongo_client.is_connected() else "disconnected",
                "type": "MongoDB",
                "url": settings.MONGODB_URL,
                "database": settings.DATABASE_NAME,
                "collection": settings.USERS_COLLECTION,
                "statistics": db_stats
            },
            "authentication": {
                "status": "active",
                "type": "JWT",
                "algorithm": settings.JWT_ALGORITHM,
                "expiration_minutes": settings.JWT_EXPIRATION_TIME_MINUTES
            }
        },
        "api": {
            "version": "v1",
            "prefix": settings.API_V1_PREFIX,
            "docs": "/docs",
            "redoc": "/redoc"
        },
        "health_checks": {
            "main": f"{settings.API_V1_PREFIX}/health",
            "detailed": "/status"
        },
        "timestamp": datetime.utcnow().isoformat(),
        "uptime_status": "running"
    }

# Funci√≥n para ejecutar la aplicaci√≥n durante desarrollo
def run_dev():
    """
    Ejecuta la aplicaci√≥n en modo desarrollo.
    Solo usar para desarrollo local.
    """
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    run_dev()